use std::{fs::File, io::Write};

const BUILD_INFO_PATH: &str = "./src/info/build_info.rs";

fn main() {
    let content = build_info_content().unwrap();
    let bytes = content.as_bytes();
    
    let mut file = File::create(BUILD_INFO_PATH).unwrap();
    file.write(bytes).unwrap();
}

fn build_info_content() -> Result<String, String> {
    let output = std::process::Command::new("git")
        .arg("rev-parse")
        .arg("--short")
        .arg("HEAD")
        .output()
        .map_err(|e| "")?;
    let git_revision = String::from_utf8(output.stdout).map_err(|e| "")?;
    let git_revision = git_revision.trim_matches('\n');

    let output = std::process::Command::new("git")
        .arg("config")
        .arg("--get")
        .arg("remote.origin.url")
        .output()
        .map_err(|e| "")?;
    let git_repo = String::from_utf8(output.stdout).map_err(|e| "")?;
    let git_repo = git_repo.trim_matches('\n');

    let output = std::process::Command::new("git")
        .arg("rev-parse")
        .arg("--abbrev-ref")
        .arg("HEAD")
        .output()
        .map_err(|e| "")?;
    let git_branch = String::from_utf8(output.stdout).map_err(|e| "")?;
    let git_branch = git_branch.trim_matches('\n');

    let output = std::process::Command::new("rustc")
        .arg("--version")
        .output()
        .map_err(|e| "")?;
    let rustc_version = String::from_utf8(output.stdout).map_err(|e| "")?;
    let rustc_version = rustc_version.trim_matches('\n');

    let now = format!("{:?}", std::time::SystemTime::now());

    let content = format!(
"// DO NOT MODIFY THIS FILE.
// THE CONTENTS OF THIS FILE ARE AUTOMATICALLY GENERATED BY `build.rs`.
// CHANGES YOU MAKE TO THIS FILE WILL BE LOST!

use std::fmt;

#[derive(Clone, Eq, PartialEq, Hash, Debug)]
pub struct BuildInfo {{
    git_repo: String,
    git_revision: String,
    git_branch: String,
    rustc_version: String,
    build_date: String,
}}

pub fn build_info() -> BuildInfo {{
    BuildInfo {{
        git_repo: String::from(\"{}\"),
        git_revision: String::from(\"{}\"),
        git_branch: String::from(\"{}\"),
        rustc_version: String::from(\"{}\"),
        build_date: String::from(\"{}\"),
    }}
}}

impl fmt::Display for BuildInfo {{
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {{
        writeln!(f, \"Build Info\")?;
        writeln!(f, \"git repo:      {{}}\", self.git_repo)?;
        writeln!(f, \"git revision:  {{}}\", self.git_revision)?;
        writeln!(f, \"git branch:    {{}}\", self.git_branch)?;
        writeln!(f, \"rustc version: {{}}\", self.rustc_version)?;
        writeln!(f, \"build date:    {{}}\", self.build_date)?;

        Ok(())
    }}
}}
", git_repo, git_revision, git_branch, rustc_version, now
    );

    Ok(content)
}