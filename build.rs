use chrono::Utc;

use std::{fs::File, io::Write};

const BUILD_INFO_PATH: &str = "./src/info/build_info.rs";

fn main() {
    let comment = build_comment();
    let file_content = match build_content() {
        Ok(content) => content,
        Err(error) => error,
    };

    let test = format!("{}\n{}", comment, file_content);
    let bytes = test.as_bytes();

    if let Ok(mut file) = File::create(BUILD_INFO_PATH) {
        let _ = file.write(bytes);
    }
}

fn build_comment() -> &'static str {
    "// DO NOT MODIFY THIS FILE.\n// THE CONTENTS OF THIS FILE ARE AUTOMATICALLY GENERATED BY `build.rs`.\n// CHANGES YOU MAKE TO THIS FILE WILL BE LOST!\n"
}

fn build_content() -> Result<String, String> {
    let git_repo = run_process("git", vec!["rev-parse", "--short", "HEAD"])?;
    let git_revision = run_process("git", vec!["config", "--get", "remote.origin.url"])?;
    let git_branch = run_process("git", vec!["rev-parse", "--abbrev-ref", "HEAD"])?;
    let rustc_version = run_process("rustc", vec!["--version"])?;

    let build_time = Utc::now();

    let content = format!(
        "use std::fmt;

#[derive(Clone, Eq, PartialEq, Hash, Debug)]
pub struct BuildInfo {{
    git_repo: String,
    git_revision: String,
    git_branch: String,
    rustc_version: String,
    build_date: String,
}}

pub fn build_info() -> BuildInfo {{
    BuildInfo {{
        git_repo: String::from(\"{}\"),
        git_revision: String::from(\"{}\"),
        git_branch: String::from(\"{}\"),
        rustc_version: String::from(\"{}\"),
        build_date: String::from(\"{}\"),
    }}
}}

impl fmt::Display for BuildInfo {{
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {{
        writeln!(f, \"Build Info\")?;
        writeln!(f, \"git repo:      {{}}\", self.git_repo)?;
        writeln!(f, \"git revision:  {{}}\", self.git_revision)?;
        writeln!(f, \"git branch:    {{}}\", self.git_branch)?;
        writeln!(f, \"rustc version: {{}}\", self.rustc_version)?;
        writeln!(f, \"build date:    {{}}\", self.build_date)?;

        Ok(())
    }}
}}
",
        git_repo, git_revision, git_branch, rustc_version, build_time
    );

    Ok(content)
}

fn run_process(program: &str, args: Vec<&str>) -> Result<String, String> {
    let mut command = &mut std::process::Command::new(program);
    let mut command_line = String::from(program);

    for arg in args {
        command = command.arg(arg);
        command_line = format!("{} {}", command_line, arg);
    }

    let output = command
        .output()
        .map_err(|e| format!("Error while building `{}`:\n{}", command_line, e))?;
    let is_error = !output.stderr.is_empty();

    let output_bytes = if is_error {
        output.stderr
    } else {
        output.stdout
    };

    let output_string = String::from_utf8(output_bytes)
        .map_err(|e| format!("Error while formatting `{}`:\n{}", command_line, e))?;
    let result = output_string.trim_matches('\n');

    if is_error {
        Err(format!(
            "Error while running `{}`:\n{}",
            command_line, result
        ))
    } else {
        Ok(String::from(result))
    }
}
