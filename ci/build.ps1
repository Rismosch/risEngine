$ErrorActionPreference = "Stop"

Write-Host "checking preconditions..."

$sdl2_dll = "$PSScriptRoot/../SDL2.dll"
$shaderc_dll = "$PSScriptRoot/../shaderc_shared.dll"

$sdl2_dll_exists = Test-Path $sdl2_dll
$shaderc_dll_exists = Test-Path $shaderc_dll

if (!$sdl2_dll_exists) {
    throw "could not find ``SDL2.dll`` in the root directory"
}

if (!$shaderc_dll_exists) {
    throw "could not find ``shaderc_shared.dll`` in the root directory"
}

Write-Host "clearing destination directory..."

$final_directory = "$PSScriptRoot/../build"

if (Test-Path $final_directory) {
    Remove-Item -Recurse -Force $final_directory
}

New-Item -Path $final_directory -ItemType Directory | out-null

Write-Host "parsing cli args..."

$cli_cargo_clean = "--cargo-clean"
$cli_no_cargo_clean = "--no-cargo-clean"
$cli_cargo_clean_value = $false;

$cli_debug = "--debug"
$cli_release = "--release"
$cli_release_value = $true

if ($args.length -eq 0) {
    Write-Host ""
    Write-Host "INFO: you may skip user input, by providing cli args."
    Write-Host ""
    Write-Host "available args:"
    Write-Host "    $cli_cargo_clean     executes ``cargo clean`` before building"
    Write-Host "    $cli_no_cargo_clean  does not execute ``cargo clean`` (default)"
    Write-Host ""
    Write-Host "    $cli_debug           builds as debug"
    Write-Host "    $cli_release         builds as release (default)"
    Write-Host ""
    Write-Host ""
    Write-Host ""
    Write-Host ""
    Write-Host ""

    $user_input = Read-Host "should ``cargo clean`` be executed before building? (y/N)"
    if ($user_input.ToLower() -eq "y") {
        $cli_cargo_clean_value = $true
    }

    $user_input = Read-Host "should be build as release? (Y/n)"
    if ($user_input.ToLower() -eq "n") {
        $cli_release_value = $false
    }
} else {
    for($i = 0; $i -lt $args.length; ++$i) {
        $arg = $args[$i]
        switch ($arg) {
            $cli_cargo_clean { $cli_cargo_clean_value = $true }
            $cli_no_cargo_clean { $cli_cargo_clean_value = $false }
            $cli_debug { $cli_release_value = $false }
            $cli_release { $cli_release_value = $true }
            default { throw "unkown cli arg: $arg" }
        }
    }
}

Write-Host "generating build info..."

$build_info_path = "$PSScriptRoot/../crates/ris_data/src/info/build_info.rs"

function RunCommand {
    param (
        $command
    )

    try {
        return Invoke-Expression $command
    }
    catch {
        return "error while running ``$command``"
    }
}

$git_repo = RunCommand "git config --get remote.origin.url"
$git_commit = RunCommand "git rev-parse HEAD"
$git_branch = RunCommand "git rev-parse --abbrev-ref HEAD"

$rustc_version = RunCommand "rustc --version"
$rustup_toolchain = RunCommand "rustup show active-toolchain"

$build_date = Get-Date -Format "o"

$build_info_content =
"// DO NOT COMMIT CHANGES TO THIS FILE.
// DO NOT MODIFY THIS FILE.
//
// THE CONTENTS OF THIS FILE ARE AUTOMATICALLY GENERATED BY THE BUILD SCRIPT.
//
// I highly recommend you run the following git command:
// git update-index --assume-unchanged crates/ris_data/src/info/build_info.rs
//
// Doc: https://git-scm.com/docs/git-update-index#_using_assume_unchanged_bit

#[derive(Clone, Eq, PartialEq, Hash, Debug)]
pub struct BuildInfo {
    git_repo: String,
    git_commit: String,
    git_branch: String,
    rustc_version: String,
    rustup_toolchain: String,
    build_profile: String,
    build_date: String,
}

impl BuildInfo {
    pub fn new() -> BuildInfo {
        BuildInfo {
            git_repo: String::from(r`"$git_repo`"),
            git_commit: String::from(r`"$git_commit`"),
            git_branch: String::from(r`"$git_branch`"),
            rustc_version: String::from(r`"$rustc_version`"),
            rustup_toolchain: String::from(r`"$rustup_toolchain`"),
            build_profile: profile(),
            build_date: String::from(r`"$build_date`"),
        }
    }
}

impl Default for BuildInfo {
    fn default() -> Self {
        Self::new()
    }
}

#[cfg(debug_assertions)]
fn profile() -> String {
    String::from(`"debug`")
}

#[cfg(not(debug_assertions))]
fn profile() -> String {
    String::from(`"release`")
}

impl std::fmt::Display for BuildInfo {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        writeln!(f, `"Build`")?;
        writeln!(f, `"git repo:     {}`", self.git_repo)?;
        writeln!(f, `"git commit:   {}`", self.git_commit)?;
        writeln!(f, `"git branch:   {}`", self.git_branch)?;
        writeln!(f, `"compiler:     {}`", self.rustc_version)?;
        writeln!(f, `"toolchain:    {}`", self.rustup_toolchain)?;
        writeln!(f, `"profile:      {}`", self.build_profile)?;
        writeln!(f, `"build date:   {}`", self.build_date)?;

        Ok(())
    }
}
"

Set-Content -Path $build_info_path -Value $build_info_content

Write-Host "compiling workspace..."

if ($cli_cargo_clean_value -eq $true) {
    cargo clean
}

if ($cli_release_value -eq $true) {
    cargo build -r
    $build_profile = "release"
} else {
    cargo build
    $build_profile = "debug"
}

Write-Host "moving files..."

$target_directory = "$PSScriptRoot/../target/$build_profile"

Copy-Item "$target_directory/ris_engine.exe" -Destination "$final_directory/ris_engine.exe"
Copy-Item $sdl2_dll -Destination "$final_directory/SDL2.dll"
Copy-Item $shaderc_dll -Destination "$final_directory/shaderc_shared.dll"

$resolved_final_directory = Resolve-Path $final_directory

Write-Host "done! final build can be found under ``$resolved_final_directory``"

